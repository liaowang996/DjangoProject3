"""
Django settings for api_platform project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import sys
# 1. 获取 Django 项目配置目录的路径（settings.py 所在目录）
current_settings_dir = os.path.dirname(os.path.abspath(__file__))
# 2. 获取 Django 项目根目录（api_platform/）
django_project_dir = os.path.dirname(current_settings_dir)
# 3. 获取框架根目录（common 所在的目录，即 api_platform 的父目录）
framework_root_dir = os.path.dirname(django_project_dir)
# 4. 将框架根目录加入 sys.path（确保 Python 能找到 common）
if framework_root_dir not in sys.path:
    sys.path.append(framework_root_dir)

from common.config import CONFIG
from pathlib import Path

# 项目根路径
BASE_DIR = Path(__file__).resolve().parent.parent
# 框架根路径（指向API_TEST_FRAME）
FRAMEWORK_DIR = BASE_DIR.parent
# 3. 关键：添加PYTHON_EXECUTABLE配置（获取当前虚拟环境的Python可执行文件路径）
PYTHON_EXECUTABLE = sys.executable  # 自动获取虚拟环境的python.exe路径


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0s!95z*$9#&o3=11hxz2*i5%x4o_q=&qz86_-(rla_nz)f_0u)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 第三方APP
    'crispy_forms',
    'crispy_bootstrap5',
    # 'pagination',
    # 自定义APP
    'api_auto',
    'ui_auto',
    'data_maker',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'pagination.middleware.PaginationMiddleware',  # 分页中间件
]

ROOT_URLCONF = 'api_platform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 全局模板目录
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api_platform.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# 4. 数据库配置（复用原有MySQL配置）
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': CONFIG['MYSQL_DB_DATABASE'],
        'USER': CONFIG['MYSQL_DB_USER'],
        'PASSWORD': CONFIG['MYSQL_DB_PASSWORD'],
        'HOST': CONFIG['MYSQL_DB_HOST'],
        'PORT': str(CONFIG['MYSQL_DB_PORT']),
        'OPTIONS': {
            'charset': CONFIG['MYSQL_DB_CHARSET'],
            'connect_timeout': 10,
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# 5. 静态资源配置
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # 全局静态资源
    os.path.join(FRAMEWORK_DIR, 'test_data'),  # 测试数据目录（Excel上传目标）
]

# 6. 表单美化配置
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# 7. 日志配置（复用原有log_utils）
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': CONFIG['LOG_LEVEL'],
            'class': 'logging.FileHandler',
            'filename': os.path.join(CONFIG['LOG_PATH'], 'django_platform.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': CONFIG['LOG_LEVEL'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'loggers': {
        'api_auto': {
            'handlers': ['file', 'console'],
            'level': CONFIG['LOG_LEVEL'],
            'propagate': True,
        },
    },
}